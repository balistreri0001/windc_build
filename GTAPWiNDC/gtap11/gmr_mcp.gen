*       Calibration code for gmr_mcp.gms (%datetime%)    >gmr_mcp.gen

cf0(g,r) = sum(f, vfm(f,g,r)*(1+rtf0(f,g,r)));
cm0(g,r) = sum(i, vdfm(i,g,r)*(1+rtfd0(i,g,r)) + vifm(i,g,r)*(1+rtfi0(i,g,r)));
cy0(g,r) = cf0(g,r) + cm0(g,r);
theta_cf0(g,r)$cy0(g,r)  = cf0(g,r) / cy0(g,r);

theta_vfm(f,g,r)$cf0(g,r) = vfm(f,g,r)*(1+rtf0(f,g,r)) / cf0(g,r);

theta_cm0(i,g,r)$cm0(g,r) = 
	(vdfm(i,g,r)*(1+rtfd0(i,g,r)) + vifm(i,g,r)*(1+rtfi0(i,g,r))) / cm0(g,r);

theta_vdfm(i,g,r)$vdfm(i,g,r) = vdfm(i,g,r)*(1+rtfd0(i,g,r)) / 
	(vdfm(i,g,r)*(1+rtfd0(i,g,r)) + vifm(i,g,r)*(1+rtfi0(i,g,r)));

theta_vst(j,r)$vtw(j) = vst(j,r)/sum(r.local,vst(j,r));

vxmt(i,rr,r)$vxmd(i,rr,r) = vxmd(i,rr,r)*pvxmd(i,rr,r) + sum(j,vtwr(j,i,rr,r)*pvtwr(i,rr,r));

theta_vxmd(i,rr,r)= (vxmd(i,rr,r)*pvxmd(i,rr,r) / vxmt(i,rr,r))$vxmt(i,rr,r);
theta_vtwr(j,i,rr,r) = (vtwr(j,i,rr,r)*pvtwr(i,rr,r) / vxmt(i,rr,r))$vxmt(i,rr,r);
theta_vim(i,rr,r)$vxmt(i,rr,r)	= vxmt(i,rr,r)/vim(i,r);
theta_evom(sf,j,r)$evom(sf,r) = vfm(sf,j,r)/evom(sf,r);

j_Y(g,r) = yes$vom(g,r);
j_M(i,r) = yes$vim(i,r);
j_FT(sf,r) = yes$evom(sf,r);
j_YT(j) = yes$vtw(j);

i_P(g,r) = yes$vom(g,r);
i_PM(i,r) = yes$vim(i,r);
i_PT(j) = yes$vtw(j);
i_PF(f,r) = yes$evom(f,r);
i_PS(f,g,r) = yes$(sf(f)*vfm(f,g,r));

h_RA(r) = yes;

*	Intermediate demand:

ij_PS_FT(i_PS(sf,j,r),j_FT(sf,r)) = yes$vfm(sf,j,r);
ij_PF_FT(i_PF(sf,r),j_FT(f,r)) = yes$evom(sf,r);
ij_P_Y(i_P(i,r),j_Y(g,r)) = yes$vdfm(i,g,r);
ij_P_Y(i_P(g,r),j_Y(g,r)) = yes;
ij_PM_Y(i_PM(i,r),j_Y(g,r)) = yes$vifm(i,g,r);
ij_PS_Y(i_PS(sf,g,r),j_Y(g,r)) = yes$vfm(sf,g,r);
ij_PF_Y(i_PF(mf,r),j_Y(g,r)) = yes$vfm(mf,g,r);
ij_PM_M(i_PM(i,r),j_M(i,r)) = yes;
ij_P_M(i_P(i,rr),j_M(i,r)) = yes$vxmd(i,rr,r);
ij_PT_M(i_PT(j),j_M(i,r)) = yes$sum(rr,vtwr(j,i,rr,r));
ij_P_YT(i_P(j,r),j_YT(j)) = yes$vst(j,r);
ij_PT_YT(i_PT(j),j_YT(j)) = yes;
ih_P_RA(i_P("c",r),h_RA(r)) = yes;

*	Tax payments:

jh_Y_RA(j_Y(g,r),h_RA(r)) = yes$(abs(rto(g,r))+sum(i,abs(rtfd(i,g,r))+abs(rtfi(i,g,r)))+sum(f,abs(rtf(f,g,r))));
jh_M_RA(j_M(i,r),h_RA(rr)) = yes$(abs(rtxs(i,rr,r)) or (sameas(r,rr) and sum(rr.local,abs(rtms(i,rr,r)))));

*	Endowment:

hi_RA_P(h_RA(r),i_P(g,r)) = yes$(sum(i(g),abs(sdd(i,r)))+abs(vom(g,r))$(sameas(g,"i") or sameas(g,"g")));
hi_RA_P(h_RA(r),i_P("i",rnum))$vb(r) = yes;
hi_RA_PM(h_RA(r),i_PM(i,r)) = yes$sdi(i,r);
hi_RA_PF(h_RA(r),i_PF(f,r)) = yes$evom(f,r);

*	Set up arrays for retrieving tuples:

indices_Y(j_Y,j_Y) = yes;
indices_M(j_M,j_M) = yes;
indices_FT(j_FT,j_FT) = yes;
indices_YT(j_YT,j_YT) = yes;
indices_P(i_P,i_P) = yes;
indices_PM(i_PM,i_PM) = yes;
indices_PT(i_PT,i_PT) = yes;
indices_PF(i_PF,i_PF) = yes;
indices_PS(i_PS,i_PS) = yes;
indices_RA(h_RA,h_RA) = yes;
